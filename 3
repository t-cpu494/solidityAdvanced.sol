// SPDX-License-Identifier: GPL-3.0
pragma solidity >= 0.5.0 < 0.9.0;

contract sortAndSearch {
    int[] storageArray;

    function Array(int[] memory userInputArray) public {
        storageArray = bubbleSort(userInputArray);
    }

    function searchElement(int find) public view returns (bool) {
        return binarySearch(storageArray, find);
    }

    function bubbleSort(int[] memory userInputArray) private pure returns (int[] memory) {
        uint n = userInputArray.length;
        for (uint i = 0; i < n - 1; i++) {
            for (uint j = 0; j < n - i - 1; j++) {
                if (userInputArray[j] > userInputArray[j + 1]) {
                    (userInputArray[j], userInputArray[j + 1]) = (userInputArray[j + 1], userInputArray[j]); // Swap elements
                }
            }
        }
        return userInputArray;
    }

    function binarySearch(int[] memory sortedArray, int find) private pure returns (bool) {
        uint left = 0;
        uint right = sortedArray.length - 1;

        while (left <= right) {
            uint mid = (left + right) / 2;
            if (sortedArray[mid] == find) {
                return true;
            } else if (sortedArray[mid] < find) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return false;
    }
}
