// SPDX-License-Identifier: GPL - 3.0
pragma solidity >= 0.5.0 < 0.9.0;

contract largestNum {
    int public largestNumInArray;
    function UserInputArray(int[] memory userInputArray) public {
        quickSort(userInputArray, 0, userInputArray.length - 1);
        largestNumInArray = userInputArray[userInputArray.length - 1];
    }

    function quickSort(int[] memory userInputArray, uint start, uint end) private pure returns(int[] memory) {
        if(start < end) {
            uint Pindex = partition(userInputArray, start, end);
            quickSort(userInputArray, Pindex + 1, end);
            if(Pindex != 0) {
            quickSort(userInputArray, start, Pindex - 1);
            }
        }
        return userInputArray;
    }

    function partition(int[] memory userInputArray, uint start, uint end) private pure returns(uint) {
        int Pivot = userInputArray[end];
        uint Pindex = start;
        for(uint i = start; i < end; i++) {
            if (userInputArray[i] <= Pivot) {
                (userInputArray[i], userInputArray[Pindex]) = (userInputArray[Pindex], userInputArray[i]);
                Pindex++;
            }
        }
        (userInputArray[Pindex], userInputArray[end]) = (userInputArray[end], userInputArray[Pindex]);
        return Pindex;
    }
}
